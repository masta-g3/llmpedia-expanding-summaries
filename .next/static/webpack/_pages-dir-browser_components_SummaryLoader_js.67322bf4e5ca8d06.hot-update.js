"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_SummaryLoader_js",{

/***/ "(pages-dir-browser)/./utils/summaryHelper.js":
/*!********************************!*\
  !*** ./utils/summaryHelper.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractParagraphs: () => (/* binding */ extractParagraphs),\n/* harmony export */   hasSummaryTags: () => (/* binding */ hasSummaryTags),\n/* harmony export */   processSummaryData: () => (/* binding */ processSummaryData)\n/* harmony export */ });\n/**\n * Helper utility to process summary data from various sources\n * and convert it to a standard string format\n */ /**\n * Processes summary data from any format to a standard string\n * @param {any} summaryData - The summary data to process\n * @returns {string} - A properly formatted string suitable for rendering\n */ function processSummaryData(summaryData) {\n    // If already a string, return it\n    if (typeof summaryData === 'string') {\n        return summaryData;\n    }\n    // Handle different object formats\n    if (summaryData && typeof summaryData === 'object') {\n        // Case 1: Object with summary property\n        if (summaryData.summary && typeof summaryData.summary === 'string') {\n            return summaryData.summary;\n        }\n        // Case 2: Object with text property\n        if (summaryData.text && typeof summaryData.text === 'string') {\n            return summaryData.text;\n        }\n        // Case 3: Array of paragraphs\n        if (Array.isArray(summaryData) || summaryData.paragraphs && Array.isArray(summaryData.paragraphs)) {\n            const paragraphs = Array.isArray(summaryData) ? summaryData : summaryData.paragraphs;\n            return paragraphs.join('\\n\\n');\n        }\n        // If it's an object but we can't extract the text, stringify it for debugging\n        try {\n            return JSON.stringify(summaryData, null, 2);\n        } catch (e) {\n            console.error('Failed to stringify summary object:', e);\n            return 'Error: Could not process summary data';\n        }\n    }\n    // For all other cases (null, undefined, numbers, etc.)\n    return String(summaryData || '');\n}\n/**\n * Extracts paragraphs from a summary text\n * @param {string} text - The text to extract paragraphs from\n * @returns {string[]} - Array of paragraph strings\n */ function extractParagraphs(text) {\n    if (!text || typeof text !== 'string') {\n        return [];\n    }\n    // Split text by double newlines (typical paragraph separator)\n    return text.split(/\\n\\s*\\n/).filter((p)=>p.trim().length > 0);\n}\n/**\n * Checks if a summary contains the expected original/new tags\n * @param {string} text - The summary text to check\n * @returns {boolean} - True if the text contains any of our expected tags\n */ function hasSummaryTags(text) {\n    if (!text || typeof text !== 'string') {\n        return false;\n    }\n    return text.includes('<original>') || text.includes('<new>');\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3V0aWxzL3N1bW1hcnlIZWxwZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztDQUdDLEdBRUQ7Ozs7Q0FJQyxHQUNNLFNBQVNBLG1CQUFtQkMsV0FBVztJQUM1QyxpQ0FBaUM7SUFDakMsSUFBSSxPQUFPQSxnQkFBZ0IsVUFBVTtRQUNuQyxPQUFPQTtJQUNUO0lBRUEsa0NBQWtDO0lBQ2xDLElBQUlBLGVBQWUsT0FBT0EsZ0JBQWdCLFVBQVU7UUFDbEQsdUNBQXVDO1FBQ3ZDLElBQUlBLFlBQVlDLE9BQU8sSUFBSSxPQUFPRCxZQUFZQyxPQUFPLEtBQUssVUFBVTtZQUNsRSxPQUFPRCxZQUFZQyxPQUFPO1FBQzVCO1FBRUEsb0NBQW9DO1FBQ3BDLElBQUlELFlBQVlFLElBQUksSUFBSSxPQUFPRixZQUFZRSxJQUFJLEtBQUssVUFBVTtZQUM1RCxPQUFPRixZQUFZRSxJQUFJO1FBQ3pCO1FBRUEsOEJBQThCO1FBQzlCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0osZ0JBQWlCQSxZQUFZSyxVQUFVLElBQUlGLE1BQU1DLE9BQU8sQ0FBQ0osWUFBWUssVUFBVSxHQUFJO1lBQ25HLE1BQU1BLGFBQWFGLE1BQU1DLE9BQU8sQ0FBQ0osZUFBZUEsY0FBY0EsWUFBWUssVUFBVTtZQUNwRixPQUFPQSxXQUFXQyxJQUFJLENBQUM7UUFDekI7UUFFQSw4RUFBOEU7UUFDOUUsSUFBSTtZQUNGLE9BQU9DLEtBQUtDLFNBQVMsQ0FBQ1IsYUFBYSxNQUFNO1FBQzNDLEVBQUUsT0FBT1MsR0FBRztZQUNWQyxRQUFRQyxLQUFLLENBQUMsdUNBQXVDRjtZQUNyRCxPQUFPO1FBQ1Q7SUFDRjtJQUVBLHVEQUF1RDtJQUN2RCxPQUFPRyxPQUFPWixlQUFlO0FBQy9CO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVNhLGtCQUFrQlgsSUFBSTtJQUNwQyxJQUFJLENBQUNBLFFBQVEsT0FBT0EsU0FBUyxVQUFVO1FBQ3JDLE9BQU8sRUFBRTtJQUNYO0lBRUEsOERBQThEO0lBQzlELE9BQU9BLEtBQUtZLEtBQUssQ0FBQyxXQUFXQyxNQUFNLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLElBQUksR0FBR0MsTUFBTSxHQUFHO0FBQzdEO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVNDLGVBQWVqQixJQUFJO0lBQ2pDLElBQUksQ0FBQ0EsUUFBUSxPQUFPQSxTQUFTLFVBQVU7UUFDckMsT0FBTztJQUNUO0lBRUEsT0FBT0EsS0FBS2tCLFFBQVEsQ0FBQyxpQkFBaUJsQixLQUFLa0IsUUFBUSxDQUFDO0FBQ3REIiwic291cmNlcyI6WyIvVXNlcnMvbWFuYWdlci9Db2RlL21pY3JvX2FwcHMvbGxtcGVkaWEtZXhwYW5kaW5nLXN1bW1hcmllcy91dGlscy9zdW1tYXJ5SGVscGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVscGVyIHV0aWxpdHkgdG8gcHJvY2VzcyBzdW1tYXJ5IGRhdGEgZnJvbSB2YXJpb3VzIHNvdXJjZXNcbiAqIGFuZCBjb252ZXJ0IGl0IHRvIGEgc3RhbmRhcmQgc3RyaW5nIGZvcm1hdFxuICovXG5cbi8qKlxuICogUHJvY2Vzc2VzIHN1bW1hcnkgZGF0YSBmcm9tIGFueSBmb3JtYXQgdG8gYSBzdGFuZGFyZCBzdHJpbmdcbiAqIEBwYXJhbSB7YW55fSBzdW1tYXJ5RGF0YSAtIFRoZSBzdW1tYXJ5IGRhdGEgdG8gcHJvY2Vzc1xuICogQHJldHVybnMge3N0cmluZ30gLSBBIHByb3Blcmx5IGZvcm1hdHRlZCBzdHJpbmcgc3VpdGFibGUgZm9yIHJlbmRlcmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1N1bW1hcnlEYXRhKHN1bW1hcnlEYXRhKSB7XG4gIC8vIElmIGFscmVhZHkgYSBzdHJpbmcsIHJldHVybiBpdFxuICBpZiAodHlwZW9mIHN1bW1hcnlEYXRhID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdW1tYXJ5RGF0YTtcbiAgfVxuXG4gIC8vIEhhbmRsZSBkaWZmZXJlbnQgb2JqZWN0IGZvcm1hdHNcbiAgaWYgKHN1bW1hcnlEYXRhICYmIHR5cGVvZiBzdW1tYXJ5RGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBDYXNlIDE6IE9iamVjdCB3aXRoIHN1bW1hcnkgcHJvcGVydHlcbiAgICBpZiAoc3VtbWFyeURhdGEuc3VtbWFyeSAmJiB0eXBlb2Ygc3VtbWFyeURhdGEuc3VtbWFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBzdW1tYXJ5RGF0YS5zdW1tYXJ5O1xuICAgIH1cbiAgICBcbiAgICAvLyBDYXNlIDI6IE9iamVjdCB3aXRoIHRleHQgcHJvcGVydHlcbiAgICBpZiAoc3VtbWFyeURhdGEudGV4dCAmJiB0eXBlb2Ygc3VtbWFyeURhdGEudGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBzdW1tYXJ5RGF0YS50ZXh0O1xuICAgIH1cbiAgICBcbiAgICAvLyBDYXNlIDM6IEFycmF5IG9mIHBhcmFncmFwaHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdW1tYXJ5RGF0YSkgfHwgKHN1bW1hcnlEYXRhLnBhcmFncmFwaHMgJiYgQXJyYXkuaXNBcnJheShzdW1tYXJ5RGF0YS5wYXJhZ3JhcGhzKSkpIHtcbiAgICAgIGNvbnN0IHBhcmFncmFwaHMgPSBBcnJheS5pc0FycmF5KHN1bW1hcnlEYXRhKSA/IHN1bW1hcnlEYXRhIDogc3VtbWFyeURhdGEucGFyYWdyYXBocztcbiAgICAgIHJldHVybiBwYXJhZ3JhcGhzLmpvaW4oJ1xcblxcbicpO1xuICAgIH1cbiAgICBcbiAgICAvLyBJZiBpdCdzIGFuIG9iamVjdCBidXQgd2UgY2FuJ3QgZXh0cmFjdCB0aGUgdGV4dCwgc3RyaW5naWZ5IGl0IGZvciBkZWJ1Z2dpbmdcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN1bW1hcnlEYXRhLCBudWxsLCAyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc3RyaW5naWZ5IHN1bW1hcnkgb2JqZWN0OicsIGUpO1xuICAgICAgcmV0dXJuICdFcnJvcjogQ291bGQgbm90IHByb2Nlc3Mgc3VtbWFyeSBkYXRhJztcbiAgICB9XG4gIH1cbiAgXG4gIC8vIEZvciBhbGwgb3RoZXIgY2FzZXMgKG51bGwsIHVuZGVmaW5lZCwgbnVtYmVycywgZXRjLilcbiAgcmV0dXJuIFN0cmluZyhzdW1tYXJ5RGF0YSB8fCAnJyk7XG59XG5cbi8qKlxuICogRXh0cmFjdHMgcGFyYWdyYXBocyBmcm9tIGEgc3VtbWFyeSB0ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSB0ZXh0IHRvIGV4dHJhY3QgcGFyYWdyYXBocyBmcm9tXG4gKiBAcmV0dXJucyB7c3RyaW5nW119IC0gQXJyYXkgb2YgcGFyYWdyYXBoIHN0cmluZ3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJhZ3JhcGhzKHRleHQpIHtcbiAgaWYgKCF0ZXh0IHx8IHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBcbiAgLy8gU3BsaXQgdGV4dCBieSBkb3VibGUgbmV3bGluZXMgKHR5cGljYWwgcGFyYWdyYXBoIHNlcGFyYXRvcilcbiAgcmV0dXJuIHRleHQuc3BsaXQoL1xcblxccypcXG4vKS5maWx0ZXIocCA9PiBwLnRyaW0oKS5sZW5ndGggPiAwKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdW1tYXJ5IGNvbnRhaW5zIHRoZSBleHBlY3RlZCBvcmlnaW5hbC9uZXcgdGFnc1xuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgc3VtbWFyeSB0ZXh0IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUcnVlIGlmIHRoZSB0ZXh0IGNvbnRhaW5zIGFueSBvZiBvdXIgZXhwZWN0ZWQgdGFnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzU3VtbWFyeVRhZ3ModGV4dCkge1xuICBpZiAoIXRleHQgfHwgdHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIFxuICByZXR1cm4gdGV4dC5pbmNsdWRlcygnPG9yaWdpbmFsPicpIHx8IHRleHQuaW5jbHVkZXMoJzxuZXc+Jyk7XG59Il0sIm5hbWVzIjpbInByb2Nlc3NTdW1tYXJ5RGF0YSIsInN1bW1hcnlEYXRhIiwic3VtbWFyeSIsInRleHQiLCJBcnJheSIsImlzQXJyYXkiLCJwYXJhZ3JhcGhzIiwiam9pbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwiY29uc29sZSIsImVycm9yIiwiU3RyaW5nIiwiZXh0cmFjdFBhcmFncmFwaHMiLCJzcGxpdCIsImZpbHRlciIsInAiLCJ0cmltIiwibGVuZ3RoIiwiaGFzU3VtbWFyeVRhZ3MiLCJpbmNsdWRlcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/summaryHelper.js\n"));

/***/ })

});